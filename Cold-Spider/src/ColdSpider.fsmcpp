<sm:StateMachine xmlns:sm="http://www.stateforge.com/StateMachineCpp-v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.stateforge.com/StateMachineCpp-v1                                      http://www.stateforge.com/xsd/StateMachineCpp-v1.xsd">
    <!-- General settings -->
    <settings asynchronous="false" library="std">
        <object instance="workerView" class="WorkWindow" include="WorkWindow.h"/>
        <object instance="idleView" class="IdleWindow" include="IdleWindow.h"/>
        <include>Login.h</include>
    </settings>
    <!-- Events -->
    <events>
        <eventSource name="MainEvent">
            <event id="doWork2" name="doWork2">
                <parameter name="login" type="Login_cr"/>
            </event>
            <event id="doWork" name="doWork"/>
            <event id="secondStage" name="secondStage"/>
            <event id="init" name="init"/>
            <event id="start" name="start">
                <parameter name="login" type="Login_cr"/>
            </event>
            <event id="stop" name="stop"/>
        </eventSource>
    </events>
    <!-- States -->
    <state name="StateMachine">
        <transition event="init" nextState="Idle"/>
        <state name="Idle">
            <onEntry>
                <action>idleView.show()</action>
            </onEntry>
            <onExit>
                <action>idleView.hide()</action>
            </onExit>
            <transition event="start" nextState="FirstStage" condition="login == TestLogin">
                <action>idleView.loginAction(login)</action>
            </transition>
        </state>
        <state name="Working">
            <onEntry>
                <action>workerView.show()</action>
            </onEntry>
            <onExit>
                <action>workerView.hide()</action>
            </onExit>
            <state name="FirstStage">
                <onEntry>
                    <action>workerView.firstStage()</action>
                </onEntry>
                <transition event="stop" nextState="SecondStage"/>
                <transition event="doWork" nextState="FirstStage">
                    <action>workerView.doWork()</action>
                </transition>
                <transition event="doWork2" nextState="FirstStage">
                    <action>workerView.doWork2(login)</action>
                </transition>
            </state>
            <state name="SecondStage">
                <onEntry>
                    <action>workerView.secondStage()</action>
                </onEntry>
                <transition event="stop" nextState="Idle"/>
            </state>
        </state>
    </state>
</sm:StateMachine>
